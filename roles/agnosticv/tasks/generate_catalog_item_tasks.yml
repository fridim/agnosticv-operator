---
- include_tasks: specified_behaviors.yml

- set_fact:
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ stage }}"

- name: Use namespace defined in the catalog item YAML
  vars:
    _catalog_item_namespace: >-
      {%- if merged_vars.__meta__.catalog.multiuser | default(false) | bool -%}
      {{ merged_vars.__meta__.catalog.multiuser_infra_namespace | default(merged_vars.__meta__.catalog.namespace) | default(default_catalog_namespace) }}
      {%- else -%}
      {{ merged_vars.__meta__.catalog.namespace | default(default_catalog_namespace) }}
      {%- endif -%}
    _user_catalog_item_namespace: >-
      {{ merged_vars.__meta__.catalog.namespace | default(default_catalog_namespace) }}
  set_fact:
    anarchy_namespace: >-
      {{ lookup('template_string', merged_vars.__meta__.anarchy.namespace | default(default_anarchy_namespace)) | replace('_', '-') }}
    catalog_item_namespace: >-
      {{ lookup('template_string', _catalog_item_namespace) | replace('_', '-') }}
    user_catalog_item_namespace: >-
      {{ lookup('template_string', _user_catalog_item_namespace) | replace('_', '-') }}

# FIXME - Deploy Anarchy into the namespace?
- name: Create Anarchy Namespace
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ anarchy_namespace }}"

# FIXME - Validate catalog namespace values? Control catalog namespace labels?
- name: Create Catalog Namespace
  when: not merged_vars.__meta__.catalog.disable | default(false) | bool
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ catalog_item_namespace }}"

- name: OpenShift template
  when: not merged_vars.__meta__.catalog.disable | default(false) | bool
  k8s:
    state: present
    definition: "{{ lookup('template', 'template.yml.j2' ) | from_yaml }}"
    apply: true
  vars:
    _name: "{{ catalog_item_name }}"
    _namespace: "{{ catalog_item_namespace }}"
    # Use description.adoc first, then variables
    _description: >-
      {{ lookup('file',
                ( agnosticv_path,
                  c_i | dirname,
                  'description.adoc') | join('/'),
                  errors='ignore')
      | default(merged_vars.__meta__.catalog.description, true)
      | default(default_description)
      }}

# Need to get current resource version and force replace because catalog item
# resources with descriptions are too large to apply.
- name: Get current state of Babylon Catalog Item object
  when: not merged_vars.__meta__.catalog.disable | default(false) | bool
  k8s_info:
    api_version: babylon.gpte.redhat.com/v1
    kind: CatalogItem
    namespace: "{{ catalog_item_namespace }}"
    name: "{{ catalog_item_name }}"
  register: r_get_catalog_item

- name: Create / Update Babylon Catalog Item object
  when: not merged_vars.__meta__.catalog.disable | default(false) | bool
  k8s:
    state: present
    definition: "{{ lookup('template', 'catalog_item.yml.j2') | from_yaml }}"
    force: true
  vars:
    _bookbag: "{{ merged_vars.__meta__.bookbag | default({}) }}"
    _catalog: "{{ merged_vars.__meta__.catalog }}"
    _current_resource_version: "{{ r_get_catalog_item.resources[0].metadata.resourceVersion | default('') }}"
    _icon: "{{ merged_vars.__meta__.catalog.icon | default('') }}"
    _namespace: "{{ catalog_item_namespace }}"
    _name: "{{ catalog_item_name }}"
    _stage: "{{ stage }}"
    # Use description.adoc first, then variables
    _description_adoc: >-
      {{ lookup('file',
                ( agnosticv_path,
                  c_i | dirname,
                  'description.adoc') | join('/'),
                  errors='ignore')
      }}
    _description_html: >-
      {{ lookup('file',
                ( agnosticv_path,
                  c_i | dirname,
                  'description.html') | join('/'),
                  errors='ignore')
      }}
    _description: >-
      {{ _description_html
      | default(_description_adoc, true)
      | default(merged_vars.__meta__.catalog.description, true)
      | default(default_description)
      }}
    _description_format: >-
      {{ (_description_html == '') | ternary('asciidoc', 'html') }}
    _service_ready_message_template_html_j2: >-
      {{ lookup('file',
                ( agnosticv_path,
                  c_i | dirname,
                  'service-ready-message-template.html.j2') | join('/'),
                  errors='ignore')
      }}
    _service_deleted_message_template_html_j2: >-
      {{ lookup('file',
                ( agnosticv_path,
                  c_i | dirname,
                  'service-deleted-message-template.html.j2') | join('/'),
                  errors='ignore')
      }}
    register: create_catalog_item

- name: Manage Babylon User Catalog Item object
  when:
  - not merged_vars.__meta__.catalog.disable | default(false) | bool
  - vars.merged_vars.__meta__.catalog.multiuser | default(false) | bool
  block:
  # Need to get current resource version and force replace because catalog
  # item resources with descriptions are too large to apply.
  - name: Get current state of Babylon User Catalog Item object
    k8s_info:
      api_version: babylon.gpte.redhat.com/v1
      kind: CatalogItem
      namespace: "{{ user_catalog_item_namespace }}"
      name: "{{ catalog_item_name }}.user"
    register: r_get_user_catalog_item

  - name: Create / Update Babylon User Catalog Item object
    k8s:
      state: present
      definition: "{{ lookup('template', 'user_catalog_item.yml.j2') | from_yaml }}"
      force: true
    vars:
      _catalog: "{{ vars.merged_vars.__meta__.catalog }}"
      _current_resource_version: "{{ r_get_user_catalog_item.resources[0].metadata.resourceVersion | default('') }}"
      _icon: "{{ merged_vars.__meta__.catalog.icon | default('') }}"
      _namespace: "{{ user_catalog_item_namespace }}"
      _name: "{{ catalog_item_name }}"
      _stage: "{{ stage }}"
      # Use description.adoc first, then variables
      _description_adoc: >-
        {{ lookup('file',
                  ( agnosticv_path,
                    c_i | dirname,
                    'description.adoc') | join('/'),
                    errors='ignore')
        }}
      _description_html: >-
        {{ lookup('file',
                  ( agnosticv_path,
                    c_i | dirname,
                    'description.html') | join('/'),
                    errors='ignore')
        }}
      _description: >-
        {{ _description_html
        | default(_description_adoc, true)
        | default(merged_vars.__meta__.catalog.description, true)
        | default(default_description)
        }}
      _description_format: >-
        {{ (_description_html == '') | ternary('asciidoc', 'html') }}

- name: Create / Update OpenShift Governor object
  when: None != vars.merged_vars.__meta__.deployer.type | default(None)
  k8s:
    state: present
    definition: "{{ lookup('template', 'governor.yml.j2') | from_yaml }}"
    apply: true
  vars:
    _name: "{{ catalog_item_name }}"
    _namespace: "{{ anarchy_namespace }}"

- name: Create / Update Poolboy ResourceProvider
  when: None != vars.merged_vars.__meta__.deployer.type | default(None)
  k8s:
    state: present
    definition: "{{ lookup('template', 'resource_provider.yml.j2') | from_yaml }}"
    apply: true
  vars:
    _name: "{{ catalog_item_name }}"
    _namespace: "{{ poolboy_namespace }}"
    _catalog: "{{ vars.merged_vars.__meta__.catalog }}"
    _governor: "{{ catalog_item_name }}"
