---
apiVersion: anarchy.gpte.redhat.com/v1
kind: AnarchyGovernor
metadata:
  name: {{ _name }}
{% if current_resource_version != '' %}
  resourceVersion: "{{ current_resource_version }}"
{% endif %}
spec:
  ansibleGalaxyRequirements:
    roles:
    - name: babylon_anarchy_governor
      src: {{ ('git+' ~ babylon_anarchy_governor_repo) | to_json }}
      version: {{ babylon_anarchy_governor_version | to_json }}
{% if gpte_reporting %}
    - name: babylon_gpte_reporting
      src: {{ ('git+' ~ babylon_gpte_reporting_repo) | to_json }}
      version: {{ babylon_gpte_reporting_version | to_json }}
{% endif %}
{% if merged_vars.__meta__.aws_sandboxed | default(false) %}
    - name: babylon_aws_sandbox
      src: {{ ('git+' ~ babylon_aws_sandbox_repo) | to_json }}
      version: {{ babylon_aws_sandbox_version | to_json }}
{% endif %}
{% if merged_vars.__meta__.scheduler.enable | default(false) %}
    - name: babylon_agnostics
      src: {{ ('git+' ~ babylon_agnostics_repo) | to_json }}
      version: {{ babylon_agnostics_version | to_json }}
{% endif %}
  pythonRequirements: |
    awscli==1.18.92
    pymysql==0.9.3
  vars:
    # Flags to modify scheduled action behavior
    schedule_destroy_after_provision: {{ merged_vars.__meta__.schedule_destroy_after_provision | default('disabled') }}
    schedule_stop_after_provision: {{ merged_vars.__meta__.schedule_stop_after_provision | default(merged_vars.__meta__.idle_after_deploy ~ 'h' if merged_vars.__meta__.idle_after_deploy is defined else 'disabled') }}
    schedule_stop_after_start: {{ merged_vars.__meta__.schedule_stop_after_start | default(merged_vars.__meta__.idle_after_start ~ 'h' if merged_vars.__meta__.idle_after_start is defined else 'disabled') }}

    # Job variables to pass to Ansible Tower job runner (dark tower)
    job_vars:
      __meta__:
        tower:
          organization: {{ account | to_json }}
{% for key in vars.merged_vars if
  key not in vars.merged_vars.__meta__.catalog.parameters | d([]) | json_query('[].name') %}
      {{ key }}: {{ vars.merged_vars[key] | to_json }}
{% endfor %}

  varSecrets:
  - name: babylon-tower
    var: babylon_tower
{% for secret in vars.merged_vars.__meta__.secrets | default([]) %}
{%   if secret is mapping %}
{%     if 'name' in secret %}
{%       if secret.var | default('') != 'agnostics_mgr_access'
            or vars.merged_vars.__meta__.scheduler.enable | default(false) %}
  - name: {{ secret.name | replace('_', '-') | to_json }}
{%         if 'namespace' in secret %}
    namespace: {{ secret.namespace | to_json }}
{%         endif %}
    var: {{ secret.var | default('job_vars') | to_json }}
{%       endif %}
{%     endif %}
{%   else %}
  - name: {{ secret | replace('_', '-') | to_json }}
    var: job_vars
{%   endif %}
{% endfor %}

  subjectEventHandlers:
    create:
      roles:
      - role: babylon_anarchy_governor
    update:
      roles:
      - role: babylon_anarchy_governor
    delete:
      roles:
      - role: babylon_anarchy_governor

  actions:
    # anarchy_action_name
    provision:
      roles:
{% if merged_vars.__meta__.aws_sandboxed | default(false) %}
      - role: babylon_aws_sandbox
{% endif %}
{% if merged_vars.__meta__.scheduler.enable | default(false) %}
      - role: babylon_agnostics
{% endif %}
      - role: babylon_anarchy_governor
      callbackHandlers:
        # anarchy_action_name
        # anarchy_action_callback_name
        # anarchy_action_callback_data
        started:
          roles:
{% if gpte_reporting %}
          - role: babylon_gpte_reporting
{% endif %}
          - role: babylon_anarchy_governor
        complete:
          roles:
{% if gpte_reporting %}
          - role: babylon_gpte_reporting
{% endif %}
          - role: babylon_anarchy_governor
    destroy:
      roles:
{% if merged_vars.__meta__.aws_sandboxed | default(false) %}
      - role: babylon_aws_sandbox
{% endif %}
{% if merged_vars.__meta__.scheduler.enable | default(false) %}
      - role: babylon_agnostics
{% endif %}
      - role: babylon_anarchy_governor
      callbackHandlers:
        started:
          roles:
          - role: babylon_anarchy_governor
        complete:
          roles:
{% if merged_vars.__meta__.aws_sandboxed | default(false) %}
          - role: babylon_aws_sandbox
{% endif %}
{% if merged_vars.__meta__.scheduler.enable | default(false) %}
          - role: babylon_agnostics
{% endif %}
          - role: babylon_anarchy_governor
    # Check provision status to detect failures
    check:
      roles:
      - role: babylon_anarchy_governor
{% for __action in ('start', 'stop', 'status') %}
    {{ __action }}:
      roles:
{%   if merged_vars.__meta__.aws_sandboxed | default(false) %}
      - role: babylon_aws_sandbox
{%   endif %}
{% if merged_vars.__meta__.scheduler.enable | default(false) %}
      - role: babylon_agnostics
{% endif %}
      - role: babylon_anarchy_governor
      callbackHandlers:
        started:
          roles:
          - role: babylon_anarchy_governor
        complete:
          roles:
          - role: babylon_anarchy_governor
{% endfor %}
