---
apiVersion: anarchy.gpte.redhat.com/v1
kind: AnarchyGovernor
metadata:
  name: {{ _name }}
  namespace: anarchy-operator
  resourceVersion: "{{ current_resource_version }}"
{% raw %}
spec:
  api: babylon

  vars:
    poolboy_resource_index: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-index'] | default('') }}
    poolboy_resource_claim_name: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-claim-name'] | default('') }}
    poolboy_resource_claim_namespace: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-claim-namespace'] | default('') }}
    poolboy_resource_handle_name: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-handle-name'] | default('') }}
    poolboy_resource_handle_namespace: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-handle-namespace'] | default('') }}

    job_vars:
      __meta__:
        callback:
          token: "{{ anarchy_action_callback_token }}"
          url: "{{ anarchy_action_callback_url }}"
        tower:
{% endraw %}
          organization: {{ account | to_json }}
{% for key in vars.merged_vars if
  key not in vars.merged_vars.__meta__.catalog.parameters | d([]) | json_query('[].name') %}
      {{ key }}: {{ vars.merged_vars[key] | to_json }}
{% endfor %}

  varSecrets:
  - name: babylon-tower
    var: babylon_tower
{% for secret in vars.merged_vars.__meta__.secrets | default([]) %}
  - name: {{ secret | to_json }}
    var: job_vars
{% endfor %}

{% raw %}
  subjectEventHandlers:
    create:
      tasks:
      - name: Set state provision-scheduled in subject status
        anarchy_subject_update:
          metadata:
            labels:
              state: provision-scheduled
          status:
            state: provision-scheduled
      - name: Start Provision
        anarchy_schedule_action:
          action: provision

    update:
      tasks:
      - when: >-
          'started' == anarchy_subject.spec.desiredState | default('') and
          'stopped' == anarchy_subject.status.state | default('')
        block:
        - name: Set state start-scheduled in subject status
          anarchy_subject_update:
            metadata:
              labels:
                state: start-scheduled
            status:
              state: start-scheduled
        - name: Start Resume
          anarchy_schedule_action:
            action: start
      - when: >-
          'stopped' == anarchy_subject.spec.desiredState | default('') and
          'started' == anarchy_subject.status.state | default('')
        block:
        - name: Set state stop-pending in subject status
          anarchy_subject_update:
            metadata:
              labels:
                state: stop-pending
            status:
              state: stop-pending
        - name: Schedule stop
          anarchy_schedule_action:
            action: stop
    delete:
      tasks:
      - name: Schedule destroy
        anarchy_schedule_action:
          action: destroy

  actions:
    provision:
      tasks:
      - name: Call API
        uri:
          url: https://{{ babylon_tower.hostname }}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          force_basic_auth: true
          validate_certs: false
          method: POST
          return_content: true
          status_code: 201
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                     'ACTION': 'provision',
                     '__meta__': {
                       'callback': {'token': anarchy_action_callback_token, 'url': anarchy_action_callback_url},
                       'deployer': {'entry_point': 'ansible/main.yml'},
                       'tower': {'action': 'provision'}
                     }
                   }, recursive=True)
                }}
        register: r_api_response
        # FIXME - Handle API errors
        #ignore_errors: true

      callbackHandlers:
        started:
          tasks:
          - name: Set state provisioning in subject status
            anarchy_subject_update:
              metadata:
                labels:
                  state: provisioning
              status:
                state: provisioning
        complete:
          tasks:
          - name: Set state started in subject status
            anarchy_subject_update:
              metadata:
                labels:
                  state: started
              status:
                state: started
{% endraw %}
{% if 'schedule_stop_after_provision' in merged_vars.__meta__ or 'idle_after_deploy' in merged_vars.__meta__ %}
          - name: Schedule stop
            anarchy_schedule_action:
              action: stop
              after: {{ merged_vars.__meta__.schedule_stop_after_provision | default(merged_vars.__meta__.idle_after_deploy) }}
{% endif %}
{% if 'schedule_destroy_after_provision' in merged_vars.__meta__ %}
          - name: Schedule destroy
            anarchy_schedule_action:
              action: destroy
              after: {{ merged_vars.__meta__.schedule_destroy_after_provision }}
{% endif %}
{% raw %}
    stop:
      tasks:
      - name: Call API
        uri:
          url: https://{{ babylon_tower.hostname }}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          force_basic_auth: true
          validate_certs: false
          method: POST
          return_content: true
          status_code: 201
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                     'ACTION': 'stop',
                     '__meta__': {
                       'callback': {'token': anarchy_action_callback_token, 'url': anarchy_action_callback_url},
                       'deployer': {'entry_point': 'ansible/lifecycle_entry_point.yml'},
                       'tower': {'action': 'stop'}
                     }
                   }, recursive=True)
                }}
        register: r_api_response
        # FIXME - Handle API errors
        #ignore_errors: true

      callbackHandlers:
        started:
          tasks:
          - name: Set state stopping in subject status
            anarchy_subject_update:
              metadata:
                labels:
                  state: stopping
              status:
                state: stopping
          - name: Update desiredState stopped in subject resource handle
            when:
            - poolboy_resource_handle_name != ''
            - poolboy_resource_handle_namespace != ''
            k8s:
              api_version: poolboy.gpte.redhat.com/v1
              kind: ResourceHandle
              name: "{{ poolboy_resource_handle_name }}"
              namespace: "{{ poolboy_resource_handle_namespace }}"
              merge_type: merge
              definition:
                spec:
                  template:
                    spec:
                      desiredState: stopped
            ignore_errors: true
          - name: Update desiredState stopped in subject resource claim
            when:
            - poolboy_resource_claim_name != ''
            - poolboy_resource_claim_namespace != ''
            k8s:
              api_version: poolboy.gpte.redhat.com/v1
              kind: ResourceClaim
              name: "{{ poolboy_resource_claim_name }}"
              namespace: "{{ poolboy_resource_claim_name }}"
              merge_type: merge
              definition:
                spec:
                  template:
                    spec:
                      desiredState: stopped
            ignore_errors: true
        complete:
          tasks:
          - name: Set state stopped in subject status
            anarchy_subject_update:
              metadata:
                labels:
                  state: stopped
              status:
                state: stopped

    start:
      tasks:
      - name: Call API
        uri:
          url: https://{{ babylon_tower.hostname }}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          force_basic_auth: true
          validate_certs: false
          method: POST
          return_content: true
          status_code: 201
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                     'ACTION': 'start',
                     '__meta__': {
                       'callback': {'token': anarchy_action_callback_token, 'url': anarchy_action_callback_url},
                       'deployer': {'entry_point': 'ansible/lifecycle_entry_point.yml'},
                       'tower': {'action': 'start'}
                     }
                   }, recursive=True)
                }}
        register: r_api_response
        # FIXME - Handle API errors
        #ignore_errors: true

      callbackHandlers:
        started:
          tasks:
          - name: Set state starting in subject status
            anarchy_subject_update:
              metadata:
                labels:
                  state: starting
              status:
                state: starting
        complete:
          tasks:
          - name: Set state started in subject status
            anarchy_subject_update:
              metadata:
                labels:
                  state: started
              status:
                state: started
{% endraw %}
{% if 'schedule_stop_after_start' in merged_vars.__meta__ or 'idle_after_start' in merged_vars.__meta__ %}
          - name: Schedule stop
            anarchy_schedule_action:
              action: stop
              after: {{ merged_vars.__meta__.schedule_stop_after_start | default(merged_vars.__meta__.idle_after_start) }}
{% endif %}
{% raw %}

    destroy:
      tasks:
      - name: Call API
        uri:
          url: https://{{ babylon_tower.hostname }}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          force_basic_auth: true
          validate_certs: false
          method: POST
          return_content: true
          status_code: 201
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                     'ACTION': 'destroy',
                     '__meta__': {
                       'callback': {'token': anarchy_action_callback_token, 'url': anarchy_action_callback_url},
                       'deployer': {'entry_point': 'ansible/destroy.yml'},
                       'tower': {'action': 'destroy'}
                     }
                   }, recursive=True)
                }}
        register: r_api_response
        # FIXME - Handle API errors
        #ignore_errors: true

      callbackHandlers:
        complete:
          tasks:
          - name: Delete anarchy subject
            anarchy_subject_delete:
              remove_finalizers: true
          - name: Delete resource handle
            when:
            - poolboy_resource_handle_name != ''
            - poolboy_resource_handle_namespace != ''
            k8s:
              api_version: poolboy.gpte.redhat.com/v1
              kind: ResourceHandle
              name: "{{ poolboy_resource_handle_name }}"
              namespace: "{{ poolboy_resource_handle_namespace }}"
              state: absent
            ignore_errors: true
          - name: Delete resource claim
            when:
            - poolboy_resource_claim_name != ''
            - poolboy_resource_claim_namespace != ''
            k8s:
              api_version: poolboy.gpte.redhat.com/v1
              kind: ResourceClaim
              name: "{{ poolboy_resource_claim_name }}"
              namespace: "{{ poolboy_resource_claim_namespace }}"
              state: absent
            ignore_errors: true
{% endraw %}
